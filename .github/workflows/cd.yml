name: CD - Build, Push & Deploy

on:
  push:
    branches:
      - main

jobs:
  build_push_and_deploy:
    runs-on: ubuntu-latest

    env:
      DOCKER_NAMESPACE: ${{ secrets.DOCKER_NAMESPACE }}
      IMAGE_FRONTEND: ${{ secrets.DOCKER_NAMESPACE }}/three-tier-web-app_frontend
      IMAGE_BACKEND: ${{ secrets.DOCKER_NAMESPACE }}/three-tier-web-app_backend }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # ========= FRONTEND DOCKER BUILD =========
      - name: Build and Push Frontend
        run: |
          cd application-code/web-tier
          docker build -t $IMAGE_FRONTEND:${{ github.sha }} .
          docker tag $IMAGE_FRONTEND:${{ github.sha }} $IMAGE_FRONTEND:latest
          docker push $IMAGE_FRONTEND:${{ github.sha }}
          docker push $IMAGE_FRONTEND:latest

      # ========= BACKEND DOCKER BUILD =========
      - name: Build and Push Backend
        run: |
          cd application-code/app-tier
          docker build -t $IMAGE_BACKEND:${{ github.sha }} .
          docker tag $IMAGE_BACKEND:${{ github.sha }} $IMAGE_BACKEND:latest
          docker push $IMAGE_BACKEND:${{ github.sha }}
          docker push $IMAGE_BACKEND:latest

      # ========= DEPLOY TO EC2 =========
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo " Installing Docker & Docker Compose..."
            sudo apt-get update -y
            sudo apt-get install -y docker.io
            sudo systemctl enable docker
            sudo systemctl start docker

            # Install Docker Compose
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" \
              -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            echo " Docker installation complete"

            # Add user to docker group for permission and activate in this SSH session
            sudo usermod -aG docker $USER
            exec sg docker <<'SGEOF'
            echo " Docker group activated for current session"

            # Export images for compose
            export IMAGE_FRONTEND="${IMAGE_FRONTEND}"
            export IMAGE_BACKEND="${IMAGE_BACKEND}"

            mkdir -p ~/deploy-three-tier
            cd ~/deploy-three-tier

            # Create docker-compose file
            cat > docker-compose.production.yml <<EOF
            services:
              frontend:
                image: ${IMAGE_FRONTEND}:latest
                container_name: web-tier
                restart: always
                ports:
                  - "80:80"
                networks:
                  - app-network

              backend:
                image: ${IMAGE_BACKEND}:latest
                container_name: app-tier
                restart: always
                ports:
                  - "4000:4000"
                env_file:
                  - .env
                networks:
                  - app-network

            networks:
              app-network:
                driver: bridge
            EOF

            # Generate .env file if not exists
            if [ ! -f .env ]; then
              echo "DB_HOST=${{ secrets.RDS_HOST }}" > .env
              echo "DB_USER=${{ secrets.RDS_USER }}" >> .env
              echo "DB_PASSWORD=${{ secrets.RDS_PASSWORD }}" >> .env
              echo "DB_DATABASE=${{ secrets.RDS_DATABASE }}" >> .env
              chmod 600 .env
            fi

            echo " Deploying containers..."
            sudo docker-compose -f docker-compose.production.yml pull
            sudo docker-compose -f docker-compose.production.yml up -d
            sudo docker system prune -f
            echo " Deployment Successful!"
            SGEOF
